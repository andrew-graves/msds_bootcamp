# Load packages ----------
library(tidyverse)
library(lme4)
library(simr)
library(grid)

# Specify values of parameters ----------
subj <- seq(100, 160, 60)
time_points <- seq(3, 21, 3)
corr_coeffs <- .3
first_order_autocor <- .3
# Number of iterations for each simulation
n_iter <- 500

# Set sum-to-zero contrasts ----------
options(contrasts = c("contr.sum", "contr.poly"))

# Read and format data ----------
dat <- read_csv("Chicago_LongData.csv") %>%
  select(matches("ID|_R")) %>%
  rename(id = ID) %>%
  pivot_longer(cols = starts_with("V"),
  names_to = "ws", values_to = "methyl") %>%
  separate(ws, into = c("visit", "rep", "site"), sep = "_",
           remove = TRUE) %>%
  mutate_at(vars(id, site, rep), factor) %>%
  mutate(visit = factor(visit) %>%
           as.numeric() %>%
           scale() %>%
           as.vector()) %>%
  filter(site == "924")

# Fit the model ---------
mod_init <- lmer(methyl ~ visit + (visit|id), data = dat, REML = TRUE)

# Try various optimizers to facilitate convergence
set.seed(42)
optims <- allFit(mod_init)

# Extract indices of optimizers that converged

optim_msgs <- summary(optims)$msgs %>%
  map_lgl(is_null)

if(sum(optim_msgs) == 0){
  
  good_optims <- summary(optims)$which.OK %>%
    which()
  optim_idx <- good_optims[1]
  
} else {
  
  good_optims <- optim_msgs %>%
    which()
  optim_idx <- good_optims[1]
  
}

# Extract the succesfully converged model
mod <- optims[[optim_idx]]

# Tabulate random effects ----------
rand_efs <- tibble(
  intercept = ranef(mod)$id$`(Intercept)` + getME(mod, "beta")[1],
  slope = ranef(mod)$id$visit + getME(mod, "beta")[2]
)

# Simulate z-score from multivariate normal distribution 
# w/ random slopes ----------

# Simulate correlation and auto-correlation
sim_cor_autocor <- function (x, corr, n_reps = 1, y_mean = 0 , y_sd = 1) {
  
  n <- length(x)
  subj_num <- n / n_reps
  y <- rep(NA, n)
  
  # Simulate auto-correlated z-score time-series
  y <- 1:subj_num %>%
    map_dfr(function(x) arima.sim(model = list(ar = first_order_autocor), 
                                  n = 1000)[1:n_reps] %>%
            data.frame()
            ) %>% 
    scale() %>% 
    as.vector()
  
  z <- corr * scale(x)[, 1] + sqrt(1 - corr^2) * scale(resid(lm(y ~ x)))[, 1]
  y_res <- y_mean + y_sd * z
  res <- tibble(x, y_res)
  return(res)
  
}

# Initialize parameter grid and results from power analysis ----------
iter_grid <- expand.grid(n = subj, tp = time_points, r = corr_coeffs)

power_dat <- tibble(n = 0, tp = 0, r = 0, mean = 0, lower = 0, upper = 0,
                    .rows = nrow(iter_grid))

# Iterate through the parameters for the power analysis ----------
for(i in 1:nrow(iter_grid)){
  
  set.seed(42)
  # Simulate z-scores correlated with random OXTR slopes from each subject
  # Each = 4 accounts for the fact that there are four visits
  sim_cor_dat <- sim_cor_autocor(rep(rand_efs$slope, each = 4), 
                         corr = iter_grid[i, "r"], n_reps = 4)
  
  # Add simulated z-scores to data frame
  # Each = 3 accounts for the fact that there are 3 methylation reps
  dat_sim <- dat %>%
    mutate(sim_z = rep(sim_cor_dat$y_res, each = 3))
  
  # Fit the model with the two-way interaction between linear time effect and 
  # simulated z-score
  mod_sim_init <- lmer(methyl ~ visit * sim_z + (visit|id) + (0 + sim_z|id), 
                       data = dat_sim, REML = TRUE)
  
  # Extract indices of optimizers that converged 
  sim_optims <- allFit(mod_sim_init)
  
  sim_optim_msgs <- summary(sim_optims)$msgs %>%
    map_lgl(is_null)
  
  if(sum(sim_optim_msgs) == 0){
    
    good_sim_optims <- summary(sim_optims)$which.OK %>%
      which()
    sim_optim_idx <- good_sim_optims[1]
      
  } else {
    
    good_sim_optims <- sim_optim_msgs %>%
      which()
    sim_optim_idx <- good_sim_optims[1]
    
  }
  
  # Extract the succesfully converged model 
  mod_sim <- sim_optims[[sim_optim_idx]]
  
  # Extract model parameters for power simulation ----------
  
  # Fixed effects
  fixed <- mod_sim %>%
    fixef() %>%
    unname()
  
  # Random effects
  rand_df <- mod_sim %>%
    VarCorr() %>%
    data.frame()
  
  rand <- list(
    rand_df$vcov[1], rand_df$vcov[2], rand_df$vcov[3], rand_df$vcov[4]
  )
  
  # Residual effect
  res <- rand_df$sdcor[5]
  
  # Build the simulated data ----------
  subj <- iter_grid[i, "n"]
  time <- iter_grid[i, "tp"]
  
  sim_dat <- data.frame(id = factor(rep(1:subj, each = time, times = 3)), 
                        time = scale(rep(1:time, times = subj)), 
                        z = rep(rnorm(subj*3), each = time / 3)
                        )
  
  # Fit a simulated model with parameters from above
  model <- makeLmer(y ~ time * z + (time|id) + (0 + z|id), fixef = fixed, 
                    VarCorr = rand, sigma = res, data = sim_dat)
  
  # Test the power at specified parameters
  set.seed(42)
  power <- powerSim(model, nsim = n_iter, test = fcompare(y ~ time + z))
  
  # Append final dataframe for plotting
  power_dat[i, ] <- iter_grid[i, ] %>%
    cbind(summary(power)) %>%
    select(-successes, -trials)
  
  # Display progress on parameter iteration
  print(power_dat[i, ])
  print(iter_grid[i, ])
  
}

# Plot results ----------

title1 <- expression(paste(
  "Power analysis: Simulated correlation (Pearson's", ~italic(r), 
  " = .3) between"
  ))
title2 <- expression(paste(
  italic(OXTR), 
  "m linear growth and a hypothetical variable (measured 3x)"
))

power_dat %>%
  mutate(lower = case_when(
            mean == 1 ~ 1,
            TRUE ~ lower),
         r = factor(r),
         tp = factor(tp),
         mean = 100 * mean,
         lower = 100 * lower,
         upper = 100 * upper,
         n = fct_inorder(paste(n, "participants"))) %>% 
  ggplot(aes(x = tp, y = mean, color = n, group = n)) + 
  geom_line(size = 1) + 
  geom_point(size = 2) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = .1) +
  geom_hline(yintercept = 80, linetype = "dashed") +
  scale_y_continuous(breaks = seq(30, 100, 10)) +
  scale_color_brewer(palette = "Set1") +
  labs(x = "# of Timepoints", y = "Statistical Power (%)", 
       color = "Sample Size",
       title = title1, subtitle = title2) +
  theme_classic() +
  theme(plot.title = element_text(size = 25),
        plot.subtitle = element_text(size = 25),
        text = element_text(family = "serif", size = 30))

# ----------