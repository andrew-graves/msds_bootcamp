geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2])
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location))
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels
)
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2])
library(tidyverse)
library(tidyverse)
covid_dat <- read_csv("owid-covid-data.csv") %>%
select(iso_code:date, total_cases_per_million) %>%
mutate(date = mdy(date)) %>%
filter(date <= as_date("2020-05-08") &
date >= as_date("2020-01-20"))
loc_fig1 <- c("United States", "United Kingdom",
"World", "South Korea", "China")
titles <- c("Total confirmed COVID-19 cases per million people",
paste("The number of confirmed cases is lower than the",
"number of total cases. The main reason for this",
"is limited testing.")
)
hex <- RColorBrewer::brewer.pal(n = length(loc_fig1), name = "Set1")
hex_colors <- hex[c(4, 5, 3, 1, 2)]
date_breaks <- paste0("2020-",
c("01-22", "03-01", "04-10", "05-08")) %>%
as_date()
date_labels <- paste0(c("Jan 1", "Mar 1", "Apr 10", "May 8"), ", 2020")
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2])
#+
# theme_classic()
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_classic()
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_minimal()
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_blank()
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_void()
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_classic()
View(raw_dat)
View(raw_dat)
?read_csv
covid_dat
covid_dat$iso_code
covid_dat$iso_code %>% unique()
library(tidyverse)
covid_dat <- read_csv("owid-covid-data.csv") %>%
select(iso_code:date, total_cases_per_million) %>%
mutate(date = mdy(date)) %>%
filter(date <= as_date("2020-05-08") &
date >= as_date("2020-01-20"))
loc_fig1 <- c("United States", "United Kingdom",
"World", "South Korea", "China")
titles <- c("Total confirmed COVID-19 cases per million people",
paste("The number of confirmed cases is lower than the",
"number of total cases. The main reason for this",
"is limited testing.")
)
hex <- RColorBrewer::brewer.pal(n = length(loc_fig1), name = "Set1")
hex_colors <- hex[c(4, 5, 3, 1, 2)]
date_breaks <- paste0("2020-",
c("01-22", "03-01", "04-10", "05-08")) %>%
as_date()
date_labels <- paste0(c("Jan 22", "Mar 1", "Apr 10", "May 8"), ", 2020")
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_classic()
library(tidyverse)
covid_dat <- read_csv("owid-covid-data.csv") %>%
select(iso_code:date, total_cases_per_million) %>%
mutate(date = lubridate::mdy(date)) %>%
filter(date <= as_date("2020-05-08") &
date >= as_date("2020-01-20"))
loc_fig1 <- c("United States", "United Kingdom",
"World", "South Korea", "China")
titles <- c("Total confirmed COVID-19 cases per million people",
paste("The number of confirmed cases is lower than the",
"number of total cases. The main reason for this",
"is limited testing.")
)
hex <- RColorBrewer::brewer.pal(n = length(loc_fig1), name = "Set1")
hex_colors <- hex[c(4, 5, 3, 1, 2)]
date_breaks <- paste0("2020-",
c("01-22", "03-01", "04-10", "05-08")) %>%
as_date()
date_labels <- paste0(c("Jan 22", "Mar 1", "Apr 10", "May 8"), ", 2020")
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_classic()
library(tidyverse)
library(lubridate)
covid_dat <- read_csv("owid-covid-data.csv") %>%
select(iso_code:date, total_cases_per_million) %>%
mutate(date = mdy(date)) %>%
filter(date <= as_date("2020-05-08") &
date >= as_date("2020-01-20"))
loc_fig1 <- c("United States", "United Kingdom",
"World", "South Korea", "China")
titles <- c("Total confirmed COVID-19 cases per million people",
paste("The number of confirmed cases is lower than the",
"number of total cases. The main reason for this",
"is limited testing.")
)
hex <- RColorBrewer::brewer.pal(n = length(loc_fig1), name = "Set1")
hex_colors <- hex[c(4, 5, 3, 1, 2)]
date_breaks <- paste0("2020-",
c("01-22", "03-01", "04-10", "05-08")) %>%
as_date()
date_labels <- paste0(c("Jan 22", "Mar 1", "Apr 10", "May 8"), ", 2020")
covid_dat %>%
filter(location %in% loc_fig1) %>%
mutate(location = fct_relevel(
as_factor(location), loc_fig1)
) %>%
ggplot(aes(x = date, y = total_cases_per_million,
color = location)) +
geom_line() +
scale_x_continuous(breaks = date_breaks,
labels = date_labels) +
scale_y_log10(n.breaks = 6,
labels = function(x) sprintf("%g", x)) +
scale_color_manual(values = hex_colors) +
labs(x = "", y = "",
title = titles[1], subtitle = titles[2]) +
theme_classic()
Sys.time
Sys.time()
?Sys.time()
Sys.time()
Sys.time()
save(print_time.R)
rstudioapi::documentSave()
source(print_time.R)
source("print_time.R")
pwd
cd()
getwd()
paste0(getwd(), "/moudle_5/r")
setwd(paste0(getwd(), "/moudle_5/r"))
my_dir <- paste0(getwd(), "/moudle_5/r")
my_dir
setwd(my_dir)
my_dir <- paste0(getwd(), "/module_5/r")
setwd(paste0(getwd(), "/module_5/r"))
setwd(my_dir)
my_dir
start <- Sys.time()
Sys.time - start
Sys.time() - start
start <- Sys.time()
Sys.time() - start
rstudioapi::documentSave()
readline()
?readline()
readline("Please provide a word")
readline("Please provide a word \n")
readline("Please provide a word:")
readline("Please provide a word: ")
input <- readline("Please provide a word: ")
input
rstudioapi::documentSave()
is.character(input)
input <- readline("Please provide a word: ")
input
is.character(input)
readlines <- function(...) {
lapply(list(...), readline)
}
readlines("Number of rows?: ", "Number of columns?: ")
purrr::map(list("Please provide your first input",
"Now your second input",
"Finally, your third input"), readline)
purrr::map(c("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: "), readline)
check <- purrr::map(c("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: "), readline)
}
check <- purrr::map(c("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: "), readline)
for(i in 1:length(check)){
print(check[i])
}
for(i in 1:length(check)){
print(unlist(check[i]))
}
for(i in 1:10){
print(i)
}
purrr::map(c("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: "), readline)
lapply(list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: "), readline)
Sys.time()
input <- readline("Please type a word: ")
wordz
input <- readline("Please type a word: ")
input
rstudioapi::documentSave()
rstudioapi::documentSaveAll()
print(Sys.time())
Sys.time() - start
start <- Sys.time()
Sys.time() - start
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
lapply(prompts, readline)
sapply(prompts, readline)
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
inputs <- sapply(prompts, readline)
}
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
inputs <- sapply(prompts, readline)
}
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
inputs <- sapply(prompts, readline)
for(i in 1:length(inputs)){
print(inputs[i])
for(i in 1:length(inputs)){
print(inputs[i])
}
{}
}
for(i in 1:length(inputs)){
print(inputs[i])
}
for(i in 1:length(inputs)){
print(inputs[i])
}
for(i in 1:length(inputs)){
print(inputs[i])
}
for(i in 1:length(inputs)){
print(inputs[i])
}
for(i in 1:length(inputs)){
print(inputs[i])
}
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
inputs <- sapply(prompts, readline)
}
inputs <- sapply(prompts, readline)
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
inputs <- sapply(prompts, readline)
}
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
inputs <- sapply(prompts, readline)
for(i in 1:length(inputs)){
print(inputs[i])
}
1:length(inputs)
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
inputs <- sapply(prompts, readline)
}
setwd("~/University of Virginia/Course Work/Summer 2020/bootcamp/module_5/r")
source(
"several_inputs.R")
source("user_input.R")
source("stopwatch.R")
rstudioapi::documentSaveAll()
source("print_time.R")
source("stopwatch.R")
source("stopwatch.R")
source("stopwatch.R")
source("stopwatch.R")
rstudioapi::documentSaveAll()
source("stopwatch.R")
source("stopwatch.R")
source("stopwatch.R")
source("stopwatch.R")
source("stopwatch.R")
stopwatch <- function(time){
start <- Sys.time()
Sys.sleep(time)
print(Sys.time() - start)
}
time_input <- readline("Test waiting time by typing a number in seconds: ")
source(stopwatch.R)
source("stopwatch.R")
stopwatch <- function(time){
start <- Sys.time()
Sys.sleep(time)
print(Sys.time() - start)
}
time_input <- readline("Test waiting time by typing a number in seconds: ")
3
source("stopwatch.R")
Sys.time()
source("several_inputs.R")
source("several_inputs.R")
source("several_inputs.R")
source("user_input.R")
source("user_input.R")
print_time <- function(){
print(Sys.time())
}
print_time()
user_input <- function(){
print(readline("Please type a word: "))
}
user_input
user_input()
source("stopwatch.R")
stopwatch <- function(time){
start <- Sys.time()
Sys.sleep(time)
print(Sys.time() - start)
}
time_input <- readline("Test waiting time by typing a number in seconds: ")
source("stopwatch.R")
prompts <- list("Please provide your first input: ",
"Now your second input: ",
"Finally, your third input: ")
print(lapply(prompts, readline))
setwd("~/University of Virginia/Course Work/Summer 2020/bootcamp/module_5")
source("r/user_input.R")
getwd()
setwd("~/University of Virginia/Course Work/Summer 2020/bootcamp/module_5/r")
source("r/user_input.R")
source("~/University of Virginia/Course Work/Summer 2020/bootcamp/module_5/r")
source("~/University of Virginia/Course Work/Summer 2020/bootcamp/module_5/r/user_input.R")
(is.numeric(1.3))
(is.numeric(a))
(is.numeric('a'))
is.numeric(a)
stopwatch <- function(time){
if(is.numeric(time)){
start <- Sys.time()
Sys.sleep(time)
print(Sys.time() - start)
}
}
time_input <- readline("Test waiting time by typing a number in seconds: ")
stopwatch(time_input)
1
time_input
source("stopwatch.R")
source("stopwatch.R")
time_input
time_input
source("stopwatch.R")
source("stopwatch.R")
reticulate::repl_python()
import numpy as np
n
quit
library(tidyverse)
read_csv("andre.csv")
